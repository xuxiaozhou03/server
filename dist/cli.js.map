{"version":3,"file":"cli.js","sources":["../cli/tableExtractor.ts","../cli/sqlGenerator.ts","../cli/genCurdSql.ts","../cli/index.ts"],"sourcesContent":["import ts from \"typescript\";\n\nexport function extractTables(tsContent: string, filePath: string): any[] {\n  const source = ts.createSourceFile(\n    filePath,\n    tsContent,\n    ts.ScriptTarget.ES2015,\n    true\n  );\n  const tables: any[] = [];\n  source.forEachChild((node) => {\n    if (ts.isVariableStatement(node)) {\n      const decl = node.declarationList.declarations[0];\n      if (\n        decl &&\n        decl.initializer &&\n        decl.initializer.kind === ts.SyntaxKind.ObjectLiteralExpression\n      ) {\n        const name = decl.name.escapedText;\n        // 安全提取对象字面量源码\n        const start = decl.initializer.pos;\n        const end = decl.initializer.end;\n        if (\n          typeof start === \"number\" &&\n          typeof end === \"number\" &&\n          start >= 0 &&\n          end > start &&\n          end <= tsContent.length\n        ) {\n          const objStr = tsContent.substring(start, end);\n          let obj;\n          try {\n            obj = eval(\"(\" + objStr + \")\");\n            tables.push({ name, ...obj });\n          } catch (e) {\n            // 跳过无法 eval 的对象\n          }\n        }\n      }\n    }\n  });\n  return tables;\n}\n","import fs from \"fs\";\nimport path from \"path\";\n\nexport function genSQL(table: any): string {\n  const fields = table.fields.map((f: any) => {\n    let line = `\\`${f.field}\\` ${f.type.toUpperCase()}`;\n    if (f.length) line += `(${f.length})`;\n    if (f.unsigned) line += \" UNSIGNED\";\n    if (!f.nullable) line += \" NOT NULL\";\n    if (f.autoIncrement) line += \" AUTO_INCREMENT\";\n    if (f.primaryKey) line += \" PRIMARY KEY\";\n    if (f.unique) line += \" UNIQUE\";\n    if (f.default !== undefined) line += ` DEFAULT '${f.default}'`;\n    if (f.comment) line += ` COMMENT '${f.comment}'`;\n    return line;\n  });\n  table.fields.forEach((f: any) => {\n    if (f.foreignKey) {\n      fields.push(\n        `FOREIGN KEY (\\`${f.field}\\`) REFERENCES \\`${f.foreignKey.referencedTable}\\`(\\`${f.foreignKey.referencedColumn}\\`)`\n      );\n    }\n  });\n  return `CREATE TABLE IF NOT EXISTS \\`${table.name}\\` (\\n  ${fields.join(\n    \",\\n  \"\n  )}\\n);`;\n}\n","import { Table } from \"./type\";\n\n/**\n * 生成 CURD SQL 语句，支持链表（外键）操作\n * @param table 当前表结构\n * @param allTables 所有表结构\n */\nexport function genCurdSql(table: Table, allTables: Table[]): string {\n  const { name, fields } = table;\n  const pk = fields.find((f) => f.primaryKey) || fields[0];\n  const idField = pk.field;\n\n  // 关联字段 join 语句\n  const joinClauses: string[] = [];\n  const selectFields: string[] = fields.map((f) => `t.\\`${f.field}\\``);\n  fields.forEach((f) => {\n    if (f.foreignKey) {\n      const refTable = allTables.find(\n        (t) => t.name === f.foreignKey!.referencedTable\n      );\n      if (refTable) {\n        joinClauses.push(\n          `LEFT JOIN \\`${refTable.name}\\` AS ${refTable.name} ON t.\\`${\n            f.field\n          }\\` = ${refTable.name}.\\`${f.foreignKey!.referencedColumn}\\``\n        );\n        // 展开主表 select 字段\n        refTable.fields.forEach((rf) => {\n          selectFields.push(\n            `${refTable.name}.\\`${rf.field}\\` AS ${refTable.name}__${rf.field}`\n          );\n        });\n      }\n    }\n  });\n\n  // 查询所有（带 join）\n  const selectAll = `SELECT ${selectFields.join(\", \")} FROM \\`${name}\\` AS t${\n    joinClauses.length ? \" \" + joinClauses.join(\" \") : \"\"\n  };`;\n  // 查询单个\n  const selectOne = `SELECT ${selectFields.join(\", \")} FROM \\`${name}\\` AS t${\n    joinClauses.length ? \" \" + joinClauses.join(\" \") : \"\"\n  } WHERE t.\\`${idField}\\` = ?;`;\n  // 新增\n  const insert = `INSERT INTO \\`${name}\\` (${fields\n    .map((f) => `\\`${f.field}\\``)\n    .join(\", \")}) VALUES (${fields.map((_) => \"?\").join(\", \")});`;\n  // 更新\n  const update = `UPDATE \\`${name}\\` SET ${fields\n    .filter((f) => f.field !== idField)\n    .map((f) => `\\`${f.field}\\` = ?`)\n    .join(\", \")} WHERE \\`${idField}\\` = ?;`;\n  // 删除\n  const del = `DELETE FROM \\`${name}\\` WHERE \\`${idField}\\` = ?;`;\n\n  return [\n    `-- 查询所有（含链表）\\n${selectAll}`,\n    `-- 查询单个（含链表）\\n${selectOne}`,\n    `-- 新增\\n${insert}`,\n    `-- 更新\\n${update}`,\n    `-- 删除\\n${del}`,\n  ].join(\"\\n\\n\");\n}\n","import fs from \"fs\";\nimport path from \"path\";\nimport { extractTables } from \"./tableExtractor\";\nimport { genSQL } from \"./sqlGenerator\";\nimport { genCurd } from \"./curdGenerator\";\nimport { genSwagger } from \"./swaggerGenerator\";\nimport { genCurdSql } from \"./genCurdSql\";\n\n// 1. 读取db目录下所有ts文件\nconst dbDir = path.resolve(__dirname, \"../db\");\nconst dbFiles = fs.readdirSync(dbDir).filter((f) => f.endsWith(\".ts\"));\nlet tables: any[] = [];\ndbFiles.forEach((file) => {\n  const filePath = path.join(dbDir, file);\n  const content = fs.readFileSync(filePath, \"utf-8\");\n  tables = tables.concat(extractTables(content, filePath));\n});\n\nconsole.log(JSON.stringify(tables, null, 2));\n\n// 3. 确保输出目录存在\nconst outDir = path.resolve(__dirname, \"..\", \"out\");\nif (!fs.existsSync(outDir)) fs.mkdirSync(outDir);\n\n// 4. 生成建表SQL\nconst sqlDir = path.resolve(outDir, \"sql\");\nif (!fs.existsSync(sqlDir)) fs.mkdirSync(sqlDir);\ntables.forEach((table) => {\n  const sql = genSQL(table);\n  fs.writeFileSync(path.join(sqlDir, `${table.name}.sql`), sql, \"utf-8\");\n});\n\n// 5. 生成CURD SQL语句（含链表操作）\nconst curdSqlDir = path.resolve(outDir, \"curd-sql\");\nif (!fs.existsSync(curdSqlDir)) fs.mkdirSync(curdSqlDir);\ntables.forEach((table) => {\n  const content = genCurdSql(table, tables);\n  fs.writeFileSync(\n    path.join(curdSqlDir, `${table.name}.sql`),\n    content,\n    \"utf-8\"\n  );\n});\n"],"names":[],"mappings":"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"}